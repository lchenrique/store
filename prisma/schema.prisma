generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?  @db.Uuid
  name        String
  description String?
  logo        String?
  palette     String   @default("zinc")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  settings    Json?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  email     String     @unique
  role      String     @default("CUSTOMER")
  createdAt DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  is_admin  Boolean    @default(false)
  addresses Address[]
  cart      CartItem[]
  favorites Favorite[]
  orders    Order[]
  reviews   Review[]
  stores    Store[]
}

model Product {
  id          String   @id(map: "Product_new_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  price       Float
  images      String[]
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Float?   @default(0)
  reviews     Review[]
}

model Review {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating    Int      @db.SmallInt
  comment   String?
  userId    String?  @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, productId])
}

model Order {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?     @db.Uuid
  storeId   String      @db.Uuid
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt DateTime    @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  price     Float
  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CartItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  price     Float
  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, productId])
}

model Favorite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, productId])
}

model Address {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String   @db.Char(2)
  zipCode      String   @db.Char(8)
  createdAt    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updatedAt    DateTime @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
